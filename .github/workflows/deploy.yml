name: Deploy To EC2

on:
  pull_request:
    branches: [ "develop" ]

env:
  BASE_RESOURCE_PATH: ./src/main/resources/application.yml

permissions: write-all

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.BASE_RESOURCE_PATH }}
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
#          cloud.aws.credentials.accessKey: ${{ secrets.S3_ACCESS_KEY }}
#          cloud.aws.credentials.secretKey: ${{ secrets.S3_SECRET_KEY }}
#          run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: gradlew에 실행 권한 부여하기
        run: chmod +x ./gradlew

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build --scan

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t news-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag news-server ${{ steps.login-ecr.outputs.registry }}/news-server:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/news-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop news-server || true
            docker rm news-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/news-server:latest
            docker run -d --name news-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/news-server:latest